{
  "tasks": [
    {
      "id": 1,
      "title": "Investigate and Fix Highlighting Disparity Between Analysis Results and Reasoning Panel",
      "description": "Trace and resolve the inconsistency where text highlighted in the reasoning & suggestions panel does not match the highlighting in the main analysis results display.",
      "details": "Begin by mapping the data flow from the LLM response through to both the analysis results display and the reasoning & suggestions panel. Identify where the highlighting metadata is generated, transformed, or lost. Use debugging tools to inspect the state and props passed to both UI components, ensuring that the highlighted text sections are consistently represented in the data structures. Pay special attention to any mapping or transformation logic that could cause discrepancies, such as mismatched indices, text offsets, or conditional rendering. Refactor the data handling so that both components consume a unified, consistent source of highlighting information. Add comments and documentation to clarify the data flow and highlight areas prone to future inconsistency. Consider implementing unit and integration tests to guard against regression.",
      "testStrategy": "1. Create test cases with known highlighted sections in the LLM response and verify that both the analysis results display and reasoning panel render highlights identically. 2. Use UI debugging tools to inspect the rendered DOM or widget tree, confirming that the same text segments are highlighted in both components. 3. Add automated tests to check for data consistency between the two components. 4. Manually test edge cases, such as overlapping highlights, multi-paragraph highlights, and empty highlights, to ensure robust handling. 5. Review logs and error boundaries for any runtime issues during highlighting rendering.",
      "status": "pending",
      "dependencies": [],
      "priority": "high",
      "subtasks": [
        {
          "id": 1,
          "title": "Trace data flow from LLM response to UI components",
          "description": "Analyze how bias detection data flows from the LLM response through the API to the React components, specifically focusing on BiasSpan and FlaggedWord data transformations",
          "details": "Examine the complete data pipeline: LLM analyzer -> API response -> frontend API layer -> BiasDetectionApp -> TextInput component vs IssuesPanel component. Document the data structures at each step and identify where highlighting metadata might be lost or transformed inconsistently.\n<info added on 2025-07-06T11:37:22.300Z>\nKEY FINDINGS: Data flow investigation reveals the core issue.\n\n**Data Flow Analysis:**\n1. LLM Response: `BiasAnalysisResponse` with `bias_spans` array\n2. BiasDetectionApp conversion: `convertToFlaggedWords()` transforms `bias_spans` to `flaggedWords` \n3. TextInput receives: `flaggedWords` prop directly from BiasDetectionApp state\n4. IssuesPanel expects: `AnalysisResult` type with `flaggedWords` property\n\n**CRITICAL ISSUE DISCOVERED:**\n- IssuesPanel is imported in BiasDetectionApp.tsx but NOT actually rendered in the JSX!\n- The IssuesPanel component is only used in Demo.tsx with mock data\n- BiasDetectionApp only renders TextInput component, not IssuesPanel\n- This explains why highlighting appears in analysis results (TextInput) but not in reasoning panel (missing IssuesPanel)\n\n**Data Type Inconsistency:**\n- TextInput uses: `FlaggedWord[]` directly \n- IssuesPanel expects: `AnalysisResult.flaggedWords` \n- BiasDetectionApp has: `BiasAnalysisResponse` but no `AnalysisResult` transformation\n\nThe \"disparity\" is actually that IssuesPanel isn't being rendered at all in the main app!\n</info added on 2025-07-06T11:37:22.300Z>",
          "status": "done",
          "dependencies": [],
          "parentTaskId": 1
        },
        {
          "id": 2,
          "title": "Compare highlighting logic between TextInput and IssuesPanel",
          "description": "Examine the highlighting implementation in both TextInput.tsx and IssuesPanel.tsx to identify differences in how they process and display flagged text",
          "details": "Compare the createTextSegments function, SmartTooltip component, and highlighting rendering logic in TextInput.tsx against how IssuesPanel.tsx displays flagged words. Look for inconsistencies in data processing, text matching, or rendering logic.\n<info added on 2025-07-06T11:38:01.621Z>\n**ROOT CAUSE IDENTIFIED - COMPONENT NOT RENDERED:**\n\nThe investigation reveals that IssuesPanel.tsx is imported in BiasDetectionApp.tsx but never actually rendered in the JSX. Only TextInput is displayed, which explains why highlighting works in the \"analysis results\" area but nothing appears in the expected \"reasoning panel.\"\n\n**Key Findings:**\n- IssuesPanel expects `AnalysisResult` type with `flaggedWords` property\n- BiasDetectionApp has `BiasAnalysisResponse` with `bias_spans` property  \n- No data conversion exists between these incompatible types\n- IssuesPanel only functions in Demo.tsx with mock data\n\n**Required Fixes:**\n1. Add IssuesPanel to BiasDetectionApp JSX rendering\n2. Create conversion from `BiasAnalysisResponse.bias_spans` to `AnalysisResult.flaggedWords`\n3. Implement proper two-panel layout\n4. Pass converted data as props to IssuesPanel\n\nThis explains the complete absence of reasoning panel content rather than a highlighting mismatch.\n</info added on 2025-07-06T11:38:01.621Z>",
          "status": "done",
          "dependencies": [
            "1.1"
          ],
          "parentTaskId": 1
        },
        {
          "id": 3,
          "title": "Debug actual runtime data with test cases",
          "description": "Create test scenarios to reproduce the highlighting disparity and examine the actual data being passed to both components",
          "details": "Set up debugging scenarios with known bias text samples, add console logging to capture the exact data structures being passed to TextInput vs IssuesPanel, and identify specific cases where disparities occur.",
          "status": "done",
          "dependencies": [
            "1.2"
          ],
          "parentTaskId": 1
        },
        {
          "id": 4,
          "title": "Implement fix for highlighting consistency",
          "description": "Based on investigation findings, implement the necessary changes to ensure consistent highlighting between analysis results and reasoning panel",
          "details": "Apply the identified solution, whether it involves data transformation unification, component logic synchronization, or API response standardization. Ensure both components use the same highlighting data source and rendering logic.",
          "status": "in-progress",
          "dependencies": [
            "1.3"
          ],
          "parentTaskId": 1
        }
      ]
    }
  ]
}